# -*- coding: utf-8 -*-
"""Jeanmarcos_Perez_HW1_cosc74.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mMo4NEdcELAUId--a02lwm7hGQu7OrnK

# HW1  Try out gradient descent

You should submit this jupyter notebook with your solutions. The solutions should include the code and also the output of all the cells.

Note that for the problmes that require a cost function as input you should always use the most recent cost function that you have implemented (unless specified otherwise).

1) [5 points] Calculate the derivative of following cost function and write it down:

$g(w) = \frac{1}{50}\left(w^4 + w^2 + 10w - 50 \right)$

$\frac{\partial}{\partial w}g(w)$ = $\frac{2w^3 + w}{25} + \frac{1}{5}$

2) [25 points] Implement the gradient descent function as discussed in class using the gradient derived in the last problem. The function should return the cost history for each step. Use the code template below:
"""

#gradient descent function
#inputs: alpha (learning rate parameter), max_its (maximum number of iterations), w0 (initialization)
def gradient_descent(alpha,max_its,w0):
    ##Your code here

    # initial weight
    weight_history = []
    w = w0
    weight_history.append(w)

    # inital cost using g(w)
    cost_history = []
    c = ((w**4)+(w**2)+(10*w)-50)/50
    cost_history.append(c)

    for i in range(max_its):

      # gradient function g'(w)
      gradient = ((2*(w**3)+w)/25) + (1/5)

      # weight at current step
      w = w - (alpha * gradient)
      weight_history.append(w)

      #cost at current step
      c = ((w**4)+(w**2)+(10*w)-50)/50
      cost_history.append(c)

    return cost_history

"""3) [10 points] Run the gradient_descent function you implemented three times, with the following parameters. Generate a single plot showing the cost as a function of step number for all three runs (combine all three runs into a single plot). If you are not familiar with plotting in python, here is the docs for matplotlib:(https://matplotlib.org/3.2.1/api/_as_gen/matplotlib.pyplot.plot.html#matplotlib.pyplot.plot).


$w^0$ = 2.0
max_its = 1000

# first run
alpha = 1
# second run
alpha = 0.1
# third run
alpha = 0.01

"""

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline
# To keep your plots embedded

##Your code here
first = gradient_descent(1, 1000, 2.0)
second = gradient_descent(0.1, 1000, 2.0)
third = gradient_descent(0.01, 1000, 2.0)

plt.plot(first, label='alpha = 1')
plt.plot(second, label='alpha = 0.1')
plt.plot(third, label='alpha = 0.01')

plt.xlabel("steps")
plt.ylabel("cost g(w)")
plt.legend()

"""For the next few problems we will be comparing fixed and diminishing learning rates

Take the following cost function:
\begin{equation}
g(w) = \left \vert w \right \vert
\end{equation}

4) [5 points] Is this function convex? If no, why not? If yes, where is its global minimum?

Yes, g(w) is the absolute value function and therefore convex. Its global minimum is at the origin (0,0).

5) [5 points] What is the derivative of the cost function?

$\frac{\partial}{\partial w}g(w)$ = $\frac{\left \vert w \right \vert}{w}$

6) [20 points] Rewrite the gradient descent function from question 2 such that it takes the cost funciton g as input and uses the autograd library to calculate the gradient. The function should return the weight and cost history for each step. Use the code template below.

autograd is a python package for automatic calculation of the gradient. Here is a tutorial on it: (http://www.cs.toronto.edu/~rgrosse/courses/csc321_2017/tutorials/tut4.pdf

Note that in Python you can pass functions around like any other variables. That is why you can pass the cost function g to the gradient_descent function.

You should be able to install it by running "pip install autograd" in a cell in your Jupyter notebook.
"""

pip install autograd

from autograd import grad

#gradient descent function
#inputs: g (cost function), alpha (learning rate parameter), max_its (maximum number of iterations), w (initialization)
def gradient_descent(g,alpha,max_its,w0):
    gradient = grad(g)   ## This is how you use the autograd library to find the gradient of a function
    ##Your code here

    # inital weight
    weight_history = []
    w = w0
    weight_history.append(w)

    # initial cost using g(w)
    cost_history = []
    c = g(w0)
    cost_history.append(c)

    for i in range(max_its):

      # weight at current step
      w = w - (alpha * gradient(w))
      weight_history.append(w)

      # cost at current step
      c = g(w)
      cost_history.append(c)

    return weight_history,cost_history

"""7) [10 points] Make a run of max_its=20 steps of gradient descent with initialization at the point $w^0 = 1.75$, and a fixed learning rate of $\alpha = 0.5$. Using the cost and weight history, plot the cost as a function of the weight for each step (cost on y-axis, weight on x-axis). Recall that the terms weight and parameter used interchangeably and both refer to w."""

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline
# To keep your plots embedded

##Your code here
w, c = gradient_descent(abs, 0.5, 20, 1.75)

plt.plot(w,c)
plt.xlabel("weight")
plt.ylabel("cost g(w)")

"""8) [15 points] Make a run of max_its=20 steps of gradient descent with initialization at the point $w^0 = 1.75$, using the diminishing rule $\alpha = \frac{1}{k}$ (for this you have to modify the gradient_descent function slightly. Use the code template below. Using the cost and wiehgt history, plot the cost as a function of the weight for each step (cost on y-axis, weight on x-axis)"""

from autograd import grad

#gradient descent function
#inputs: g (cost function), alpha (learning rate parameter), max_its (maximum number of iterations), w (initialization)
def gradient_descent(g,alpha,max_its,w0):
    gradient = grad(g)   ## This is how you use the autograd library to find the gradient of a function
    ##Your code here

    # inital weight
    weight_history = []
    w = w0
    weight_history.append(w)

    # initial cost using g(w)
    cost_history = []
    c = g(w0)
    cost_history.append(c)

    for i in range(max_its):


      if alpha=='diminishing':

        a = 1/(i+1)
        w = w - (a * gradient(w))
        weight_history.append(w)

      else:
        w = w - (alpha * gradient(w))
        weight_history.append(w)

      # cost at current step
      c = g(w)
      cost_history.append(c)

    return weight_history,cost_history

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline
# To keep your plots embedded

##Your code here
wd, cd = gradient_descent(abs, 'diminishing', 20, 1.75)

plt.plot(wd,cd)
plt.xlabel("weight")
plt.ylabel("cost g(w)")

"""9) [10 points]  Generate a single plot showing the cost as a function of step number for both runs (combine all  runs into a single plot). Which approach works better? Why ?"""

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline
# To keep your plots embedded
##Your code here

# using c and cd as defined above
plt.plot(c, label="fixed")
plt.plot(cd, label="diminishing")

plt.xlabel("steps")
plt.ylabel("cost g(w)")
plt.legend()

"""The diminishing learning rate parameter approach seems to work better seeing as how it has a lower cost compared to the fixed learning rate parameter.

We will now look at the oscilating behavior of gradient descent.

Take the following cost function:
$g(w) = w_0^2 + w_1^2 + 2\sin(1.5 (w_0 + w_1)) +2$

Note that this cost function has two parameters.

10) [5 points] Make sure your gradient descent function from problem 6 can handle cost functions with more than one parameter. You may need to rewrite it if you were not careful. Use the code template below (if your function from problem 6 is good, you can just copy and paste it here)
"""

from autograd import grad

#gradient descent function
#inputs: g (cost function), alpha (learning rate parameter), max_its (maximum number of iterations), w (initialization)
def gradient_descent(g,alpha,max_its,w0):
    gradient = grad(g)   ## This is how you use the autograd library to find the gradient of a function
    ##Your code here

    # inital weight
    weight_history = []
    weight_history.append(np.array(w0))

    # initial cost using g(w)
    cost_history = []
    c = g(w0)
    cost_history.append(c)

    for i in range(max_its):

      # weight at current step
      w = weight_history[i] - (alpha * gradient(weight_history[i]))
      weight_history.append(w)

      # cost at current step
      c = g(w)
      cost_history.append(c)

    return weight_history,cost_history

"""11) [10 points] Run the gradient_descent function with the cost function above three times with the following parameters. Generate a single plot showing the cost as a function of step number for all three runs (combine all three runs into a single plot). Use the code template below. Which alpha leads to an oscillating behavior?

$w^0$ = [3.0,3.0]
max_its = 10

# first run
alpha = 0.01
# second run
alpha = 0.1
# third run
alpha = 1


"""

import autograd.numpy as np
#Your code here
def g_fun(w):
  return (w[0]**2) + (w[1]**2) + (2*np.sin(1.5*(w[0]+w[1])) + 2 )

first = gradient_descent(g_fun, 0.01, 10, [3.0,3.0])
second = gradient_descent(g_fun, 0.1, 10, [3.0,3.0])
third = gradient_descent(g_fun, 1, 10, [3.0,3.0])

plt.plot(first[1], label="alpha = 0.01")
plt.plot(second[1], label="alpha = 0.1")
plt.plot(third[1], label="alpha = 1")

plt.xlabel("steps")
plt.ylabel("cost g(w)")
plt.legend()

"""12) [15 points] This problem is about learning to tune fixed step length for gradient descent. Here, you are given a cost function:
$g(w) = 2w_0^2 + w_1^2 +4w_2^2$

Assume your $w^0$= [5,5,5] and your max_iter = 100

Use your latest gradient descent function with a fixed learning rate. Play around with at least 5 different values of alpha (using your intuition). Generate a single plot of the cost as a function of the number of iterations. Which value of alpha seems to converge the fastest?

Not that your grade will not depend on how well you do, as long as you try at least 5 different values for alpha and plot them.
"""

import autograd.numpy as np
#Your code here
def g_fun(w):
  return (2*(w[0]**2)) + (w[1]**2) + (4*(w[2]**2))

first = gradient_descent(g_fun, 0.01, 100, [5.0,5.0,5.0])
second = gradient_descent(g_fun, 0.1, 100, [5.0,5.0,5.0])
third = gradient_descent(g_fun, 0.025, 100, [5.0,5.0,5.0])
fourth = gradient_descent(g_fun, 0.05, 100, [5.0,5.0,5.0])
fifth = gradient_descent(g_fun, 0.001, 100, [5.0,5.0,5.0])

plt.plot(first[1], label="alpha = 0.01")
plt.plot(second[1], label="alpha = 0.1")
plt.plot(third[1], label="alpha = 0.025")
plt.plot(fourth[1], label="alpha = 0.05")
plt.plot(fifth[1], label="alpha = 0.001")

plt.xlabel("iterations")
plt.ylabel("cost g(w)")
plt.legend()

"""It seems to converge fastest when alpha = 0.1"""